
LED_SEQ1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000514  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000005a8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00000d00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab9  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000349  00000000  00000000  000018b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055d  00000000  00000000  00001c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000302  00000000  00000000  000022ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000602  00000000  00000000  000025ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  8a:	0c 94 88 02 	jmp	0x510	; 0x510 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:


EN_LED_NUM_t LED_INDEX = LED_ZERO;	//using to select which led we want to access  

void app_init()
{
  92:	cf 93       	push	r28
	uint8_t LED_ID;        // using in for loop
	EN_STATUS_BUTTON_t	ret_function_button;
	EN_STATUS_LED_t		ret_function_led;
	
	
	ret_function_button = button_init(PORT_A,PIN0);
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	0e 94 93 00 	call	0x126	; 0x126 <button_init>
	}	
	else 
	{
		// DO NOTHING
	}			
		for ( LED_ID=LED_ZERO ; LED_ID<=LED_THREE ; LED_ID++ )
  9c:	c0 e0       	ldi	r28, 0x00	; 0
		{
			ret_function_led = led_init(PORT_B,LED_ID);
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	6c 2f       	mov	r22, r28
  a2:	0e 94 97 00 	call	0x12e	; 0x12e <led_init>
	}	
	else 
	{
		// DO NOTHING
	}			
		for ( LED_ID=LED_ZERO ; LED_ID<=LED_THREE ; LED_ID++ )
  a6:	cf 5f       	subi	r28, 0xFF	; 255
  a8:	c4 30       	cpi	r28, 0x04	; 4
  aa:	c9 f7       	brne	.-14     	; 0x9e <app_init+0xc>
			else 
			{
				// DO NOTHING
			}
		}
}
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <app_start>:



void app_start()
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	0f 92       	push	r0
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
	
	EN_STATUS_BUTTON_t	ret_function_button ;
	
	EN_STATUS_LED_t		ret_function_led	;
	
	ret_function_button = buttonState(PORT_A,PIN0,&value);
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	ae 01       	movw	r20, r28
  c0:	4f 5f       	subi	r20, 0xFF	; 255
  c2:	5f 4f       	sbci	r21, 0xFF	; 255
  c4:	0e 94 8b 00 	call	0x116	; 0x116 <buttonState>
	
	if(ret_function_button == OK_BUTTON)
  c8:	88 23       	and	r24, r24
  ca:	09 f5       	brne	.+66     	; 0x10e <app_start+0x5e>
	{
		if(value == HIGH)
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	c1 f4       	brne	.+48     	; 0x102 <app_start+0x52>
		{
			ret_function_led = led_toggle(PORT_B,LED_INDEX);
  d2:	60 91 60 00 	lds	r22, 0x0060
  d6:	0e 94 a3 00 	call	0x146	; 0x146 <led_toggle>
			if(ret_function_led == OK_LED)
  da:	88 23       	and	r24, r24
  dc:	91 f4       	brne	.+36     	; 0x102 <app_start+0x52>
			{
				
				
				LED_INDEX++;
  de:	80 91 60 00 	lds	r24, 0x0060
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 60 00 	sts	0x0060, r24
				
				while(value==HIGH)
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	51 f4       	brne	.+20     	; 0x102 <app_start+0x52>
				{
					buttonState(PORT_A,PIN0,&value);
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	ae 01       	movw	r20, r28
  f4:	4f 5f       	subi	r20, 0xFF	; 255
  f6:	5f 4f       	sbci	r21, 0xFF	; 255
  f8:	0e 94 8b 00 	call	0x116	; 0x116 <buttonState>
			{
				
				
				LED_INDEX++;
				
				while(value==HIGH)
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	b1 f3       	breq	.-20     	; 0xee <app_start+0x3e>
				
			}
			
				
		}
		if(LED_INDEX > LED_THREE)
 102:	80 91 60 00 	lds	r24, 0x0060
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	10 f0       	brcs	.+4      	; 0x10e <app_start+0x5e>
		{
			LED_INDEX=LED_ZERO;
 10a:	10 92 60 00 	sts	0x0060, r1
	else 
	{
		// DO NOTHING
	}
	
}
 10e:	0f 90       	pop	r0
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <buttonState>:

EN_STATUS_BUTTON_t buttonState(uint8_t port_num , uint8_t pin_num , uint8_t* value)
{	
	EN_STATUS_BUTTON_t ret_function ;
	
	if(value == NULL)
 116:	41 15       	cp	r20, r1
 118:	51 05       	cpc	r21, r1
 11a:	19 f0       	breq	.+6      	; 0x122 <buttonState+0xc>
	{
		ret_function = ERROR_BUTTON;
	}
	else 
	{
		ret_function= DIO_read(port_num , pin_num , value);
 11c:	0e 94 24 02 	call	0x448	; 0x448 <DIO_read>
 120:	08 95       	ret
{	
	EN_STATUS_BUTTON_t ret_function ;
	
	if(value == NULL)
	{
		ret_function = ERROR_BUTTON;
 122:	81 e0       	ldi	r24, 0x01	; 1
	{
		ret_function= DIO_read(port_num , pin_num , value);
	}
	
	return ret_function;
}
 124:	08 95       	ret

00000126 <button_init>:


EN_STATUS_BUTTON_t button_init(uint8_t port_num , uint8_t pin_num)
{
	EN_STATUS_BUTTON_t ret_function = DIO_init(port_num,pin_num,IN);
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_init>
	
	return ret_function;
 12c:	08 95       	ret

0000012e <led_init>:
#include "led.h"

EN_STATUS_LED_t led_init(uint8_t port_num , uint8_t pin_num)
{
	 
	EN_STATUS_LED_t ret_function = DIO_init(port_num , pin_num , OUT);
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_init>
	return ret_function;
}
 134:	08 95       	ret

00000136 <led_on>:

EN_STATUS_LED_t led_on(uint8_t port_num , uint8_t pin_num)
{
	
	EN_STATUS_LED_t ret_function=DIO_write(port_num , pin_num , HIGH);
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	0e 94 46 01 	call	0x28c	; 0x28c <DIO_write>
	return ret_function;
}
 13c:	08 95       	ret

0000013e <led_off>:

EN_STATUS_LED_t led_off(uint8_t port_num , uint8_t pin_num)
{
	EN_STATUS_LED_t ret_function=DIO_write(port_num , pin_num , LOW);
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	0e 94 46 01 	call	0x28c	; 0x28c <DIO_write>
	return ret_function;
}
 144:	08 95       	ret

00000146 <led_toggle>:

EN_STATUS_LED_t led_toggle(uint8_t port_num , uint8_t pin_num)
{
	
	EN_STATUS_LED_t ret_function=DIO_toggle(port_num , pin_num);
 146:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_toggle>
	return ret_function;
}
 14a:	08 95       	ret

0000014c <main>:
#include "app/app.h"


int main(void)
{
	app_init();
 14c:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
    while(1)
    {
        app_start();
 150:	0e 94 58 00 	call	0xb0	; 0xb0 <app_start>
 154:	fd cf       	rjmp	.-6      	; 0x150 <main+0x4>

00000156 <DIO_init>:

EN_STATUS_DIO_t DIO_init( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_PIN_DIR_t dir )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
	
	switch(port_num)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	59 f1       	breq	.+86     	; 0x1b0 <DIO_init+0x5a>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	38 f0       	brcs	.+14     	; 0x16c <DIO_init+0x16>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	09 f4       	brne	.+2      	; 0x164 <DIO_init+0xe>
 162:	48 c0       	rjmp	.+144    	; 0x1f4 <DIO_init+0x9e>
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	09 f0       	breq	.+2      	; 0x16a <DIO_init+0x14>
 168:	87 c0       	rjmp	.+270    	; 0x278 <DIO_init+0x122>
 16a:	65 c0       	rjmp	.+202    	; 0x236 <DIO_init+0xe0>
	{
		case PORT_A:
		if(dir == IN)
 16c:	44 23       	and	r20, r20
 16e:	79 f4       	brne	.+30     	; 0x18e <DIO_init+0x38>
		{
			CLR_BIT(DDRA,pin_num);
 170:	2a b3       	in	r18, 0x1a	; 26
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	ac 01       	movw	r20, r24
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_init+0x28>
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_init+0x24>
 182:	ba 01       	movw	r22, r20
 184:	60 95       	com	r22
 186:	62 23       	and	r22, r18
 188:	6a bb       	out	0x1a, r22	; 26

#include "dio.h"

EN_STATUS_DIO_t DIO_init( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_PIN_DIR_t dir )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	08 95       	ret
		if(dir == IN)
		{
			CLR_BIT(DDRA,pin_num);
			
		}
		else if(dir == OUT)
 18e:	41 30       	cpi	r20, 0x01	; 1
 190:	09 f0       	breq	.+2      	; 0x194 <DIO_init+0x3e>
 192:	74 c0       	rjmp	.+232    	; 0x27c <DIO_init+0x126>
		{
			SET_BIT(DDRA,pin_num);
 194:	2a b3       	in	r18, 0x1a	; 26
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	ac 01       	movw	r20, r24
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_init+0x4c>
 19e:	44 0f       	add	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_init+0x48>
 1a6:	ba 01       	movw	r22, r20
 1a8:	62 2b       	or	r22, r18
 1aa:	6a bb       	out	0x1a, r22	; 26

#include "dio.h"

EN_STATUS_DIO_t DIO_init( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_PIN_DIR_t dir )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret
			ret_function = ERROR_DIO;
		}
		break;
		
		case PORT_B:
		if(dir == IN)
 1b0:	44 23       	and	r20, r20
 1b2:	79 f4       	brne	.+30     	; 0x1d2 <DIO_init+0x7c>
		{
			CLR_BIT(DDRB,pin_num);
 1b4:	27 b3       	in	r18, 0x17	; 23
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	ac 01       	movw	r20, r24
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_init+0x6c>
 1be:	44 0f       	add	r20, r20
 1c0:	55 1f       	adc	r21, r21
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_init+0x68>
 1c6:	ba 01       	movw	r22, r20
 1c8:	60 95       	com	r22
 1ca:	62 23       	and	r22, r18
 1cc:	67 bb       	out	0x17, r22	; 23

#include "dio.h"

EN_STATUS_DIO_t DIO_init( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_PIN_DIR_t dir )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	08 95       	ret
		if(dir == IN)
		{
			CLR_BIT(DDRB,pin_num);
			
		}
		else if(dir == OUT)
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <DIO_init+0x82>
 1d6:	54 c0       	rjmp	.+168    	; 0x280 <DIO_init+0x12a>
		{
			SET_BIT(DDRB,pin_num);
 1d8:	27 b3       	in	r18, 0x17	; 23
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	ac 01       	movw	r20, r24
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_init+0x90>
 1e2:	44 0f       	add	r20, r20
 1e4:	55 1f       	adc	r21, r21
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_init+0x8c>
 1ea:	ba 01       	movw	r22, r20
 1ec:	62 2b       	or	r22, r18
 1ee:	67 bb       	out	0x17, r22	; 23

#include "dio.h"

EN_STATUS_DIO_t DIO_init( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_PIN_DIR_t dir )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret
			ret_function = ERROR_DIO;
		}
		break;
		
		case PORT_C:
		if(dir == IN)
 1f4:	44 23       	and	r20, r20
 1f6:	79 f4       	brne	.+30     	; 0x216 <DIO_init+0xc0>
		{
			CLR_BIT(DDRC,pin_num);
 1f8:	24 b3       	in	r18, 0x14	; 20
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	ac 01       	movw	r20, r24
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_init+0xb0>
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_init+0xac>
 20a:	ba 01       	movw	r22, r20
 20c:	60 95       	com	r22
 20e:	62 23       	and	r22, r18
 210:	64 bb       	out	0x14, r22	; 20

#include "dio.h"

EN_STATUS_DIO_t DIO_init( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_PIN_DIR_t dir )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	08 95       	ret
		if(dir == IN)
		{
			CLR_BIT(DDRC,pin_num);
			
		}
		else if(dir == OUT)
 216:	41 30       	cpi	r20, 0x01	; 1
 218:	a9 f5       	brne	.+106    	; 0x284 <DIO_init+0x12e>
		{
			SET_BIT(DDRC,pin_num);
 21a:	24 b3       	in	r18, 0x14	; 20
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ac 01       	movw	r20, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_init+0xd2>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_init+0xce>
 22c:	ba 01       	movw	r22, r20
 22e:	62 2b       	or	r22, r18
 230:	64 bb       	out	0x14, r22	; 20

#include "dio.h"

EN_STATUS_DIO_t DIO_init( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_PIN_DIR_t dir )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	08 95       	ret
		}
		break;
		
		
		case PORT_D:
		if(dir == IN)
 236:	44 23       	and	r20, r20
 238:	79 f4       	brne	.+30     	; 0x258 <DIO_init+0x102>
		{
			CLR_BIT(DDRD,pin_num);
 23a:	21 b3       	in	r18, 0x11	; 17
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_init+0xf2>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_init+0xee>
 24c:	ba 01       	movw	r22, r20
 24e:	60 95       	com	r22
 250:	62 23       	and	r22, r18
 252:	61 bb       	out	0x11, r22	; 17

#include "dio.h"

EN_STATUS_DIO_t DIO_init( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_PIN_DIR_t dir )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	08 95       	ret
		if(dir == IN)
		{
			CLR_BIT(DDRD,pin_num);
			
		}
		else if(dir == OUT)
 258:	41 30       	cpi	r20, 0x01	; 1
 25a:	b1 f4       	brne	.+44     	; 0x288 <DIO_init+0x132>
		{
			SET_BIT(DDRD,pin_num);
 25c:	21 b3       	in	r18, 0x11	; 17
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	ac 01       	movw	r20, r24
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_init+0x114>
 266:	44 0f       	add	r20, r20
 268:	55 1f       	adc	r21, r21
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_init+0x110>
 26e:	ba 01       	movw	r22, r20
 270:	62 2b       	or	r22, r18
 272:	61 bb       	out	0x11, r22	; 17

#include "dio.h"

EN_STATUS_DIO_t DIO_init( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_PIN_DIR_t dir )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 95       	ret
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	08 95       	ret
		{
			SET_BIT(DDRA,pin_num);
		}
		else
		{
			ret_function = ERROR_DIO;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	08 95       	ret
			SET_BIT(DDRB,pin_num);
			
		}
		else
		{
			ret_function = ERROR_DIO;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	08 95       	ret
			SET_BIT(DDRC,pin_num);
			
		}
		else
		{
			ret_function = ERROR_DIO;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	08 95       	ret
			SET_BIT(DDRD,pin_num);
			
		}
		else
		{
			ret_function = ERROR_DIO;
 288:	81 e0       	ldi	r24, 0x01	; 1
		default : ;	// do_nothing 
		
	}
	
	return ret_function;
}
 28a:	08 95       	ret

0000028c <DIO_write>:

EN_STATUS_DIO_t DIO_write( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t value )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
	
	switch(port_num)
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	59 f1       	breq	.+86     	; 0x2e6 <DIO_write+0x5a>
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	38 f0       	brcs	.+14     	; 0x2a2 <DIO_write+0x16>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	09 f4       	brne	.+2      	; 0x29a <DIO_write+0xe>
 298:	48 c0       	rjmp	.+144    	; 0x32a <DIO_write+0x9e>
 29a:	83 30       	cpi	r24, 0x03	; 3
 29c:	09 f0       	breq	.+2      	; 0x2a0 <DIO_write+0x14>
 29e:	87 c0       	rjmp	.+270    	; 0x3ae <DIO_write+0x122>
 2a0:	65 c0       	rjmp	.+202    	; 0x36c <DIO_write+0xe0>
	{
		case PORT_A:
		if(value == LOW)
 2a2:	44 23       	and	r20, r20
 2a4:	79 f4       	brne	.+30     	; 0x2c4 <DIO_write+0x38>
		{
			CLR_BIT(PORTA,pin_num);
 2a6:	2b b3       	in	r18, 0x1b	; 27
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	ac 01       	movw	r20, r24
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_write+0x28>
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_write+0x24>
 2b8:	ba 01       	movw	r22, r20
 2ba:	60 95       	com	r22
 2bc:	62 23       	and	r22, r18
 2be:	6b bb       	out	0x1b, r22	; 27



EN_STATUS_DIO_t DIO_write( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t value )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
		if(value == LOW)
		{
			CLR_BIT(PORTA,pin_num);
			
		}
		else if(value == HIGH)
 2c4:	41 30       	cpi	r20, 0x01	; 1
 2c6:	09 f0       	breq	.+2      	; 0x2ca <DIO_write+0x3e>
 2c8:	74 c0       	rjmp	.+232    	; 0x3b2 <DIO_write+0x126>
		{
			SET_BIT(PORTA,pin_num);
 2ca:	2b b3       	in	r18, 0x1b	; 27
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	ac 01       	movw	r20, r24
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_write+0x4c>
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_write+0x48>
 2dc:	ba 01       	movw	r22, r20
 2de:	62 2b       	or	r22, r18
 2e0:	6b bb       	out	0x1b, r22	; 27



EN_STATUS_DIO_t DIO_write( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t value )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
			ret_function=ERROR_DIO;
		}
		break;
		
		case PORT_B:
		if(value == LOW)
 2e6:	44 23       	and	r20, r20
 2e8:	79 f4       	brne	.+30     	; 0x308 <DIO_write+0x7c>
		{
			CLR_BIT(PORTB,pin_num);
 2ea:	28 b3       	in	r18, 0x18	; 24
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	ac 01       	movw	r20, r24
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_write+0x6c>
 2f4:	44 0f       	add	r20, r20
 2f6:	55 1f       	adc	r21, r21
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_write+0x68>
 2fc:	ba 01       	movw	r22, r20
 2fe:	60 95       	com	r22
 300:	62 23       	and	r22, r18
 302:	68 bb       	out	0x18, r22	; 24



EN_STATUS_DIO_t DIO_write( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t value )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	08 95       	ret
		if(value == LOW)
		{
			CLR_BIT(PORTB,pin_num);
			
		}
		else if(value == HIGH)
 308:	41 30       	cpi	r20, 0x01	; 1
 30a:	09 f0       	breq	.+2      	; 0x30e <DIO_write+0x82>
 30c:	54 c0       	rjmp	.+168    	; 0x3b6 <DIO_write+0x12a>
		{
			SET_BIT(PORTB,pin_num);
 30e:	28 b3       	in	r18, 0x18	; 24
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	ac 01       	movw	r20, r24
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_write+0x90>
 318:	44 0f       	add	r20, r20
 31a:	55 1f       	adc	r21, r21
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_write+0x8c>
 320:	ba 01       	movw	r22, r20
 322:	62 2b       	or	r22, r18
 324:	68 bb       	out	0x18, r22	; 24



EN_STATUS_DIO_t DIO_write( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t value )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	08 95       	ret
			ret_function=ERROR_DIO;
		}
		break;
		
		case PORT_C:
		if(value == LOW)
 32a:	44 23       	and	r20, r20
 32c:	79 f4       	brne	.+30     	; 0x34c <DIO_write+0xc0>
		{
			CLR_BIT(PORTC,pin_num);
 32e:	25 b3       	in	r18, 0x15	; 21
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	ac 01       	movw	r20, r24
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_write+0xb0>
 338:	44 0f       	add	r20, r20
 33a:	55 1f       	adc	r21, r21
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_write+0xac>
 340:	ba 01       	movw	r22, r20
 342:	60 95       	com	r22
 344:	62 23       	and	r22, r18
 346:	65 bb       	out	0x15, r22	; 21



EN_STATUS_DIO_t DIO_write( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t value )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret
		if(value == LOW)
		{
			CLR_BIT(PORTC,pin_num);
			
		}
		else if(value == HIGH)
 34c:	41 30       	cpi	r20, 0x01	; 1
 34e:	a9 f5       	brne	.+106    	; 0x3ba <DIO_write+0x12e>
		{
			SET_BIT(PORTC,pin_num);
 350:	25 b3       	in	r18, 0x15	; 21
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	ac 01       	movw	r20, r24
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_write+0xd2>
 35a:	44 0f       	add	r20, r20
 35c:	55 1f       	adc	r21, r21
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_write+0xce>
 362:	ba 01       	movw	r22, r20
 364:	62 2b       	or	r22, r18
 366:	65 bb       	out	0x15, r22	; 21



EN_STATUS_DIO_t DIO_write( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t value )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	08 95       	ret
		}
		break;
		
		
		case PORT_D:
		if(value == LOW)
 36c:	44 23       	and	r20, r20
 36e:	79 f4       	brne	.+30     	; 0x38e <DIO_write+0x102>
		{
			CLR_BIT(PORTD,pin_num);
 370:	22 b3       	in	r18, 0x12	; 18
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	ac 01       	movw	r20, r24
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_write+0xf2>
 37a:	44 0f       	add	r20, r20
 37c:	55 1f       	adc	r21, r21
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_write+0xee>
 382:	ba 01       	movw	r22, r20
 384:	60 95       	com	r22
 386:	62 23       	and	r22, r18
 388:	62 bb       	out	0x12, r22	; 18



EN_STATUS_DIO_t DIO_write( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t value )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	08 95       	ret
		if(value == LOW)
		{
			CLR_BIT(PORTD,pin_num);
			
		}
		else if(value == HIGH)
 38e:	41 30       	cpi	r20, 0x01	; 1
 390:	b1 f4       	brne	.+44     	; 0x3be <DIO_write+0x132>
		{
			SET_BIT(PORTD,pin_num);
 392:	22 b3       	in	r18, 0x12	; 18
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	ac 01       	movw	r20, r24
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_write+0x114>
 39c:	44 0f       	add	r20, r20
 39e:	55 1f       	adc	r21, r21
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_write+0x110>
 3a4:	ba 01       	movw	r22, r20
 3a6:	62 2b       	or	r22, r18
 3a8:	62 bb       	out	0x12, r22	; 18



EN_STATUS_DIO_t DIO_write( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t value )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	08 95       	ret
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	08 95       	ret
			SET_BIT(PORTA,pin_num);
			
		}
		else
		{
			ret_function=ERROR_DIO;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	08 95       	ret
			SET_BIT(PORTB,pin_num);
			
		}
		else
		{
			ret_function=ERROR_DIO;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	08 95       	ret
			SET_BIT(PORTC,pin_num);
			
		}
		else
		{
			ret_function = ERROR_DIO;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	08 95       	ret
			SET_BIT(PORTD,pin_num);
			
		}
		else
		{
			ret_function = ERROR_DIO;
 3be:	81 e0       	ldi	r24, 0x01	; 1
		default :  ; //DO NOTHING
		
	}
	
	return ret_function;
}
 3c0:	08 95       	ret

000003c2 <DIO_toggle>:

EN_STATUS_DIO_t DIO_toggle( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
	switch(port_num)
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	a9 f0       	breq	.+42     	; 0x3f0 <DIO_toggle+0x2e>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	28 f0       	brcs	.+10     	; 0x3d4 <DIO_toggle+0x12>
 3ca:	82 30       	cpi	r24, 0x02	; 2
 3cc:	f9 f0       	breq	.+62     	; 0x40c <DIO_toggle+0x4a>
 3ce:	83 30       	cpi	r24, 0x03	; 3
 3d0:	c9 f5       	brne	.+114    	; 0x444 <DIO_toggle+0x82>
 3d2:	2a c0       	rjmp	.+84     	; 0x428 <DIO_toggle+0x66>
	{
		case PORT_A:
		TOGGLE_BIT(PORTA,pin_num);
 3d4:	2b b3       	in	r18, 0x1b	; 27
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	ac 01       	movw	r20, r24
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_toggle+0x20>
 3de:	44 0f       	add	r20, r20
 3e0:	55 1f       	adc	r21, r21
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_toggle+0x1c>
 3e6:	ba 01       	movw	r22, r20
 3e8:	62 27       	eor	r22, r18
 3ea:	6b bb       	out	0x1b, r22	; 27
	return ret_function;
}

EN_STATUS_DIO_t DIO_toggle( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 3ec:	80 e0       	ldi	r24, 0x00	; 0
	switch(port_num)
	{
		case PORT_A:
		TOGGLE_BIT(PORTA,pin_num);
		
		break;
 3ee:	08 95       	ret
		
		case PORT_B:
		TOGGLE_BIT(PORTB,pin_num);
 3f0:	28 b3       	in	r18, 0x18	; 24
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	ac 01       	movw	r20, r24
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_toggle+0x3c>
 3fa:	44 0f       	add	r20, r20
 3fc:	55 1f       	adc	r21, r21
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_toggle+0x38>
 402:	ba 01       	movw	r22, r20
 404:	62 27       	eor	r22, r18
 406:	68 bb       	out	0x18, r22	; 24
	return ret_function;
}

EN_STATUS_DIO_t DIO_toggle( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 408:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case PORT_B:
		TOGGLE_BIT(PORTB,pin_num);
		
		break;
 40a:	08 95       	ret
		
		case PORT_C:
		TOGGLE_BIT(PORTC,pin_num);
 40c:	25 b3       	in	r18, 0x15	; 21
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	ac 01       	movw	r20, r24
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_toggle+0x58>
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_toggle+0x54>
 41e:	ba 01       	movw	r22, r20
 420:	62 27       	eor	r22, r18
 422:	65 bb       	out	0x15, r22	; 21
	return ret_function;
}

EN_STATUS_DIO_t DIO_toggle( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 424:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case PORT_C:
		TOGGLE_BIT(PORTC,pin_num);
		
		break;
 426:	08 95       	ret
		
		case PORT_D:
		TOGGLE_BIT(PORTD,pin_num);
 428:	22 b3       	in	r18, 0x12	; 18
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	ac 01       	movw	r20, r24
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_toggle+0x74>
 432:	44 0f       	add	r20, r20
 434:	55 1f       	adc	r21, r21
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_toggle+0x70>
 43a:	ba 01       	movw	r22, r20
 43c:	62 27       	eor	r22, r18
 43e:	62 bb       	out	0x12, r22	; 18
	return ret_function;
}

EN_STATUS_DIO_t DIO_toggle( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num )
{
	EN_STATUS_DIO_t ret_function= OK_DIO;    //use it in return of function
 440:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case PORT_D:
		TOGGLE_BIT(PORTD,pin_num);
		
		break;
 442:	08 95       	ret
		
		default: ret_function= ERROR_DIO ;
 444:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	
	return ret_function;
}
 446:	08 95       	ret

00000448 <DIO_read>:


EN_STATUS_DIO_t DIO_read( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t *value )
{
	EN_STATUS_DIO_t	ret_function= OK_DIO;    //use it in return of function
	switch(port_num)
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	f1 f0       	breq	.+60     	; 0x488 <DIO_read+0x40>
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	30 f0       	brcs	.+12     	; 0x45c <DIO_read+0x14>
 450:	82 30       	cpi	r24, 0x02	; 2
 452:	81 f1       	breq	.+96     	; 0x4b4 <DIO_read+0x6c>
 454:	83 30       	cpi	r24, 0x03	; 3
 456:	09 f0       	breq	.+2      	; 0x45a <DIO_read+0x12>
 458:	59 c0       	rjmp	.+178    	; 0x50c <DIO_read+0xc4>
 45a:	42 c0       	rjmp	.+132    	; 0x4e0 <DIO_read+0x98>
	{
		case PORT_A:
		*value = READ_BIT(PINA,pin_num);
 45c:	89 b3       	in	r24, 0x19	; 25
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	06 2e       	mov	r0, r22
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_read+0x22>
 466:	22 0f       	add	r18, r18
 468:	33 1f       	adc	r19, r19
 46a:	0a 94       	dec	r0
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_read+0x1e>
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	82 23       	and	r24, r18
 472:	93 23       	and	r25, r19
 474:	9c 01       	movw	r18, r24
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_read+0x34>
 478:	35 95       	asr	r19
 47a:	27 95       	ror	r18
 47c:	6a 95       	dec	r22
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_read+0x30>
 480:	fa 01       	movw	r30, r20
 482:	20 83       	st	Z, r18
}


EN_STATUS_DIO_t DIO_read( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t *value )
{
	EN_STATUS_DIO_t	ret_function= OK_DIO;    //use it in return of function
 484:	80 e0       	ldi	r24, 0x00	; 0
	switch(port_num)
	{
		case PORT_A:
		*value = READ_BIT(PINA,pin_num);
		
		break;
 486:	08 95       	ret
		
		case PORT_B:
		*value = READ_BIT(PINB,pin_num);
 488:	86 b3       	in	r24, 0x16	; 22
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	06 2e       	mov	r0, r22
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_read+0x4e>
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	0a 94       	dec	r0
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_read+0x4a>
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	82 23       	and	r24, r18
 49e:	93 23       	and	r25, r19
 4a0:	9c 01       	movw	r18, r24
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_read+0x60>
 4a4:	35 95       	asr	r19
 4a6:	27 95       	ror	r18
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_read+0x5c>
 4ac:	fa 01       	movw	r30, r20
 4ae:	20 83       	st	Z, r18
}


EN_STATUS_DIO_t DIO_read( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t *value )
{
	EN_STATUS_DIO_t	ret_function= OK_DIO;    //use it in return of function
 4b0:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case PORT_B:
		*value = READ_BIT(PINB,pin_num);
		
		break;
 4b2:	08 95       	ret
		
		case PORT_C:
		*value = READ_BIT(PINC,pin_num);
 4b4:	83 b3       	in	r24, 0x13	; 19
 4b6:	21 e0       	ldi	r18, 0x01	; 1
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	06 2e       	mov	r0, r22
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_read+0x7a>
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_read+0x76>
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	82 23       	and	r24, r18
 4ca:	93 23       	and	r25, r19
 4cc:	9c 01       	movw	r18, r24
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_read+0x8c>
 4d0:	35 95       	asr	r19
 4d2:	27 95       	ror	r18
 4d4:	6a 95       	dec	r22
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <DIO_read+0x88>
 4d8:	fa 01       	movw	r30, r20
 4da:	20 83       	st	Z, r18
}


EN_STATUS_DIO_t DIO_read( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t *value )
{
	EN_STATUS_DIO_t	ret_function= OK_DIO;    //use it in return of function
 4dc:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case PORT_C:
		*value = READ_BIT(PINC,pin_num);
		
		break;
 4de:	08 95       	ret
		
		case PORT_D:
		*value = READ_BIT(PIND,pin_num);
 4e0:	80 b3       	in	r24, 0x10	; 16
 4e2:	21 e0       	ldi	r18, 0x01	; 1
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	06 2e       	mov	r0, r22
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_read+0xa6>
 4ea:	22 0f       	add	r18, r18
 4ec:	33 1f       	adc	r19, r19
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_read+0xa2>
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	82 23       	and	r24, r18
 4f6:	93 23       	and	r25, r19
 4f8:	9c 01       	movw	r18, r24
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_read+0xb8>
 4fc:	35 95       	asr	r19
 4fe:	27 95       	ror	r18
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_read+0xb4>
 504:	fa 01       	movw	r30, r20
 506:	20 83       	st	Z, r18
}


EN_STATUS_DIO_t DIO_read( EN_PORT_NAME_t port_num, EN_PIN_NAME_t pin_num, EN_VOLTAGE_TYPE_t *value )
{
	EN_STATUS_DIO_t	ret_function= OK_DIO;    //use it in return of function
 508:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case PORT_D:
		*value = READ_BIT(PIND,pin_num);

		break;
 50a:	08 95       	ret
		
		default:ret_function = ERROR_DIO ;
 50c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret_function;
 50e:	08 95       	ret

00000510 <_exit>:
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
